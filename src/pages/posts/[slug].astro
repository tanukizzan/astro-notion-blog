---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getAllPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostUpdateDate from '../../components/PostUpdateDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import styles from '../../styles/blog.module.css'
import PostFeaturedImage from '../../components/PostFeaturedImage.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks, allPosts, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch {
          console.log('Invalid file URL: ', (block.Image || block.File)?.File?.Url)
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main" class={styles.main}>
    <div class={styles.post}>
      <div class="post-header">
        <PostTitle post={post} enableLink={false} />
      </div>
      <div class="datetags">
        <PostDate post={post} />
        <PostUpdateDate post={post} />
        <PostTags post={post} />
      </div>
      <PostFeaturedImage post={post} />
      <PostBody blocks={blocks} />

      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
        <BlogPostsLink
          heading="関連記事"
          posts={postsHavingSameTag.filter(
            (p: interfaces.Post) => p.Slug !== post.Slug
          )}
        />
      </footer>
    </div>
  </div>
</Layout>

<style>
  @media (max-width: 550px) {
    .post-header {
      padding-top: 1em;
    }
  }
  .datetags {
    margin: 0.5em 0 1em 0;
  }
</style>